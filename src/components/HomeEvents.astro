---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
dayjs.extend(utc);
dayjs.extend(timezone);
import directus from "$services/directus";
import { readItems } from "@directus/sdk";
import { BannerCard } from "$components/ui/cards/banner";

let events: any = await directus.request(
  readItems("events_characters", {
    fields: [
      "id",
      "spec",
      {
        events_id: [
          "startDate",
          "endDate",
          { layout: ["*"] },
          "status",
          { game: ["*"] },
        ],
      },
      {
        characters_id: [
          "id",
          "rarity",
          { game: ["*"] },
          "bannerName",
          "name",
          "colors",
          { events: [{ events_id: ["id", "startDate"] }] },
          { splash_art: ["*"] },
          { splash_pad: ["*"] },
        ],
      },
    ],
    limit: -1,
    filter: {
      _and: [
        { characters_id: { id: { _ncontains: "placeholder" } } },
        { _or: [{ spec: { _eq: false } }, { spec: { _null: true } }] },
      ],
    },
  })
);

events = events.map((n: any) => {
  let { id, characters_id, events_id } = n;
  characters_id.events.sort(
    (a: any, b: any) =>
      Date.parse(a.events_id.startDate) - Date.parse(b.events_id.startDate)
  );
  let event = {
    debut: characters_id.events[0].id == id,
  };
  Object.assign(event, events_id, { character: characters_id });
  return event;
});

let currentEvents = events.filter(
  (event: any) =>
    dayjs(event.startDate).isBefore(dayjs().add(1, "day")) &&
    dayjs(event.endDate).isAfter(dayjs().subtract(1, "day")) &&
    event.status == "published" &&
    event.character.rarity == 5
);
let upcomingEvents = events.filter(
  (event: any) =>
    dayjs(event.startDate).isAfter(dayjs().subtract(1, "day")) &&
    event.status == "published" &&
    event.character.rarity == 5
);
---

<section
  class="px-4 flex w-full lg:w-4/5 flex-col gap-2 transition md:grid md:grid-cols-2 lg:grid-cols-1 2xl:grid-cols-2 xl:min-h-0 lg:overflow-auto xl:p-4"
>
  <div class="flex w-full flex-col gap-2">
    <h2 class="font-subheading font-semibold text-dark">Current Events</h2>
    {
      currentEvents.map((bannerEvent: any) => {
        return <BannerCard {bannerEvent} status="current" />;
      })
    }
  </div>
  <div class="flex w-full flex-col gap-2">
    <h2 class="font-subheading font-semibold text-dark">Upcoming Events</h2>
    {
      upcomingEvents.map((bannerEvent: any) => {
        return <BannerCard {bannerEvent} status="upcoming" />;
        // return <p>{bannerEvent.name}</p>;
      })
    }
  </div>
</section>
