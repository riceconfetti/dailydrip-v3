---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
dayjs.extend(utc);
dayjs.extend(timezone);
import directus from "$services/directus";
import { readItems, readItem } from "@directus/sdk";
import BannerCard from "$components/card/BannerCard.astro";

let events: any = await directus.request(
  readItems("events_characters", {
    fields: ["*"],
    limit: -1,
    filter: {
      _and: [
        { characters_id: { _ncontains: "placeholder" } },
        { _or: [{ spec: { _eq: false } }, { spec: { _null: true } }] },
      ],
    },
  })
);

events = await Promise.all(
  events.map(async (evenChar: any) => {
    let character = await directus.request(
      readItem("characters", evenChar.characters_id, {
        fields: [
          "id",
          "rarity",
          "game",
          "bannerName",
          "name",
          "focalPoint",
          "crop",
          "colors",
          "card_edits",
          //@ts-ignore
          "splash_art.filename_disk",
        ],
      })
    );
    let event: any = await directus.request(
      readItem("events", evenChar.events_id, {
        fields: ["startDate", "endDate", "phase", "status"],
      })
    );
    let { phase, ...rest } = event;
    phase = await directus.request(readItem("phases", event.phase));

    let bannerEvent = { phase };
    Object.assign(bannerEvent, character, rest);
    return bannerEvent;
  })
);

let currentEvents = events.filter(
  (event: any) =>
    dayjs(event.startDate).isBefore(dayjs().add(1, "day")) &&
    dayjs(event.endDate).isAfter(dayjs().subtract(1, "day")) &&
    event.rarity == 5 &&
    event.status == "published"
);
let upcomingEvents = events.filter(
  (event: any) =>
    dayjs(event.startDate).isAfter(dayjs().subtract(1, "day")) &&
    event.rarity == 5 &&
    event.status == "published"
);
---

<section
  class="flex w-full lg:w-4/5 flex-col gap-2 transition md:grid md:grid-cols-2 lg:grid-cols-1 2xl:grid-cols-2 xl:min-h-0 lg:overflow-auto xl:p-4">
  <div class="flex w-full flex-col gap-2">
    <h2 class="font-subheading font-semibold text-dark">Current Events</h2>
    {
      currentEvents.map((bannerEvent: any) => {
        return <BannerCard {bannerEvent} status="current" />;
      })
    }
  </div>
  <div class="flex w-full flex-col gap-2">
    <h2 class="font-subheading font-semibold text-dark">Upcoming Events</h2>
    {
      upcomingEvents.map((bannerEvent: any) => {
        return <BannerCard {bannerEvent} status="upcoming" />;
        // return <p>{bannerEvent.name}</p>;
      })
    }
  </div>
</section>
