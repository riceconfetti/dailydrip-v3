---
const { character, class: className } = Astro.props;

import { tv } from "tailwind-variants";
import directus from "$services/directus";
import { readItem } from "@directus/sdk";

import { setValRecursive } from "src/scripts/setValRecursive";
import ProxyService from "$services/imgproxy";

import Border from "./deco-border/Border.astro";
import Placeholder from "./Placeholder.svelte";

const colorIndex = 0;
const variants = ["portrait", "landscape", "icon"];
interface Variants {
  [key: string]: any;
}

const vars = {
  "--primaryColor":
    character.colors != null
      ? `oklch(20% ${character.colors[colorIndex].c} ${character.colors[colorIndex].h})`
      : "oklch(20% 0 0)",
  "--secondaryColor":
    character.colors != null
      ? `oklch( ${character.colors[colorIndex].c} ${character.colors[colorIndex].h} /15%)`
      : "oklch(60% 0 0 /15%)",
  "--cardAccent":
    character.rarity == 5
      ? "var(--color-accent-gold-150)"
      : "var(--color-accent-purple-200)",
};

const game = await directus.request(readItem("games", character.game));
const primary = await directus.request(
  readItem("attributes", character.primary_attribute),
);
const secondary = await directus.request(
  readItem("attributes", character.secondary_attribute),
);

const backgroundPath = game?.elementMain
  ? `/backgrounds/${game?.id}/${primary?.name}.webp`
  : `/backgrounds/${game?.id}/${secondary?.name}.webp`;

const imgPath = `/characters/${character.game}/${character.id}.webp`;
const fullSplash = ProxyService.getImage(imgPath, [], "webp");
const placeholder = game?.elementMain
  ? `/placeholders/${game?.id}/${secondary?.name}.webp`
  : `/placeholders/${game?.id}/${primary?.name}.webp`;

Object.assign(vars, {
  "--placeholder": `url("${ProxyService.getImage(placeholder, [], "webp")}")`,
});

let options: any = {
  portrait: {
    bannerCrop: { x: 0.3, y: 0 },
    index: { x: 0, y: 0.12 },
  },
  landscape: {
    bannerCrop: { x: 0, y: 0.4 },
    index: { x: 0, y: 0.06 },
  },
};

if (character.card_edits != null) {
  const edits = character.card_edits;
  const variants = edits.map((e: any) => e.variant);

  variants.forEach((v: any) => {
    if (Object.keys(options).includes(v)) {
      options[v] = setValRecursive(
        options[v],
        edits.find((e: any) => e.variant == v).style,
      );
    }
  });
}

const characterTransforms = {
  portrait: [
    {
      key: "gravity",
      params: [
        "fp",
        character.focalPoint.x + options.portrait.index.x,
        character.focalPoint.y + options.portrait.index.y,
      ],
    },
    {
      key: "crop",
      params: [
        options.portrait.bannerCrop.x * character.crop.x,
        options.portrait.bannerCrop.y * character.crop.y,
      ],
    },
    { key: "resize", params: ["fill", 740, 1200, 1, 1] },
  ],
  landscape: [
    {
      key: "gravity",
      params: [
        "fp",
        character.focalPoint.x + options.landscape.index.x,
        character.focalPoint.y + options.landscape.index.y,
      ],
    },
    {
      key: "crop",
      params: [
        options.landscape.bannerCrop.x * character.crop.x,
        options.landscape.bannerCrop.y * character.crop.y,
      ],
    },
    { key: "resize", params: ["fill", 1200, 740, 1, 1] },
  ],
  icon: [
    {
      key: "gravity",
      params: ["fp", character.focalPoint.x, character.focalPoint.y + 0.02],
    },
    {
      key: "crop",
      params: [400 * character.crop.x, 400 * character.crop.y],
    },
    { key: "resize", params: ["fill", 740, 740] },
  ],
};
const backgroundTransforms = {
  portrait: [],
  landscape: [{ key: "rotate", params: [270] }],
};

const splash: Variants = variants.reduce((prev, curr) => {
  Object.assign(prev, {
    //@ts-ignore
    [curr]: ProxyService.getImage(imgPath, characterTransforms[curr], "webp"),
  });
  return prev;
}, {});

const background: Variants = variants.reduce((prev, curr) => {
  Object.assign(prev, {
    [curr]: ProxyService.getImage(
      backgroundPath,
      //@ts-ignore
      backgroundTransforms[curr],
      "webp",
    ),
  });
  return prev;
}, {});

const Holo: Variants = variants.reduce((prev, curr) => {
  Object.assign(prev, {
    [curr]: ProxyService.getImage(
      "/overlays/Holo_" + curr.at(0)?.toUpperCase() + curr.slice(1) + ".png",
      //@ts-ignore
      [],
      "webp",
    ),
  });
  return prev;
}, {});

const Frost: Variants = variants.reduce((prev, curr) => {
  Object.assign(prev, {
    [curr]: ProxyService.getImage(
      "/overlays/Frost_" + curr.at(0)?.toUpperCase() + curr.slice(1) + ".png",
      //@ts-ignore
      [],
      "webp",
    ),
  });
  return prev;
}, {});

variants.forEach((v) => {
  Object.assign(
    vars,
    { [`--char-${v}`]: `url("${splash[v]}")` },
    { [`--bg-${v}`]: `url("${background[v]}")` },
    { [`--holo-${v}`]: `url("${Holo[v]}")` },
    { [`--frost-${v}`]: `url("${Frost[v]}")` },
  );
});

const card = tv({
  slots: {
    base: "size-full bg-linear-0 from-(--primaryColor) via-(--secondaryColor) bg-cover bg-center bg-no-repeat @icon:bg-[image:var(--bg-icon)] @landscape:bg-[image:var(--bg-landscape)] @portrait:bg-[image:var(--bg-portrait)] @square:bg-[image:var(--bg-portrait)]",
    charBg:
      "absolute inset-0 bg-cover bg-top bg-no-repeat @icon:bg-[image:var(--char-icon)] @landscape:bg-[image:var(--char-landscape)] @portrait:bg-[image:var(--char-portrait)] @square:bg-[image:var(--char-landscape)]",

    overlay:
      "absolute inset-0 bg-linear-0 from-(--primaryColor) via-(--secondaryColor)",
    outline:
      "absolute inset-[0.15rem] z-10 flex flex-col justify-end rounded-sm border-1 border-(--cardAccent) p-1 text-center text-(--cardAccent) inset-shadow-card @5xs:inset-1 @5xs:border-2 @3xs:@min-h-5xs:p-4 @xl:@min-h-lg:p-8",
    name: "font-heading text-xs font-bold text-balance shadow-black drop-shadow-md @6xs:text-sm @5xs:@min-h-5xs:text-xl @sm:@min-h-xs:text-2xl @xl:@min-h-lg:text-3xl",
    banner:
      "font-subheading text-[0.5rem] text-balance italic shadow-black drop-shadow-md @3xs:text-xs @5xs:@min-h-5xs:text-sm @xs:@min-h-2xs:text-base @sm:@min-h-xs:text-lg @xl:@min-h-lg:text-xl",
    frost:
      "z-10 hidden size-full bg-cover mix-blend-screen @icon:bg-[image:var(-frost-icon)] @landscape:bg-[image:var(--frost-landscape)] @portrait:bg-[image:var(--frost-portrait)] @square:bg-[image:var(--frost-icon)]",
    holo: "absolute inset-0 z-10 hidden size-full bg-cover mix-blend-screen @icon:bg-[image:var(--holo-icon)] @landscape:bg-[image:var(--holo-landscape)] @portrait:bg-[image:var(--holo-portrait)] @square:bg-[image:var(--holo-icon)]",
  },
  variants: {
    debut: {
      true: {
        holo: "block",
        outline: "p-2 @3xs:@min-h-5xs:p-4 @xl:@min-h-lg:p-6",
      },
    },
    speculation: {
      true: {
        frost: "block",
      },
    },
    rarity: {
      5: {
        banner: "@max-6xs:hidden @icon:hidden @max-h-6xs:hidden",
      },
      4: {
        banner: "hidden",
      },
    },
  },
});

const { base, charBg, overlay, outline, name, banner, frost, holo } = card({
  rarity: character.rarity,
  speculation: character.spec,
  debut: character.debut,
});
---

<!-- CARD -->
<div
  class:list={[
    "@container-[size] size-full relative min-h-16 min-w-16",
    className,
  ]}
  style={vars}
>
  <div class={base()}>
    <div class={charBg()}></div>
    <div class={overlay()}></div>
    <Placeholder url={fullSplash} client:load />
    <!-- Text & Outline -->
    <div class={outline()}>
      <h2 class={name()}>
        {character.name}
      </h2>

      <h3 class={banner()}>
        {character.bannerName}
      </h3>
    </div>
  </div>

  <!-- OVERLAYS -->
  <div class="absolute inset-0">
    <div class={holo()}>
      <Border />
    </div>
    <div class={frost()}></div>
  </div>
</div>
