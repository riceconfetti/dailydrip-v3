---
const { character, class: className } = Astro.props;

import { tv } from "tailwind-variants";
import directus from "$services/directus";
import { readItem } from "@directus/sdk";
import ProxyService from "$services/imgproxy";
import Border from "./deco-border/Border.astro";
import defOptions from "$store/options.json";

let options = JSON.parse(JSON.stringify(defOptions));
const colorIndex = 0;
const variants = ["portrait", "landscape", "icon"];
interface Variants {
  [key: string]: any;
}

if (character.id.includes("placeholder")) {
  character.debut = false;
  if (character.id == character.game + "_placeholder") {
    character.spec = false;
  }
}

const vars = {
  "--primaryColor":
    character.colors != null
      ? `oklch(20% ${character.colors[colorIndex].c} ${character.colors[colorIndex].h})`
      : "oklch(20% 0 0)",
  "--secondaryColor":
    character.colors != null
      ? `oklch(60% ${character.colors[colorIndex].c} ${character.colors[colorIndex].h} /15%)`
      : "oklch(60% 0 0 /15%)",
  "--cardAccent":
    character.rarity == 5
      ? "var(--color-accent-gold-150)"
      : "var(--color-accent-purple-200)",
};

const game = await directus.request(readItem("games", character.game));

const primary = await directus.request(
  readItem("attributes", character.primary_attribute, {
    //@ts-ignore
    fields: ["*", "icon.filename_disk"],
  }),
);

const secondary = await directus.request(
  readItem("attributes", character.secondary_attribute),
);

const backgroundPath = game?.elementMain
  ? `/backgrounds/${game?.id}/${primary?.name}.webp`
  : `/backgrounds/${game?.id}/${secondary?.name}.webp`;

const placeholderPath = `/${primary.icon.filename_disk}`;

const fp = {
  x: character.splash_art?.focal_point_x
    ? character.splash_art?.focal_point_x
    : 0.5,
  y: character.splash_art?.focal_point_y
    ? character.splash_art?.focal_point_y
    : 0.5,
};
const size = {
  w: character.splash_art?.width,
  h: character.splash_art?.height,
};
const padding = (() => {
  let ret = {
    t: 0,
    r: 0,
    b: 0,
    l: 0,
  };
  if (fp.x < size.w / 2) {
    const x = fp.x;
    ret.l = size.w - 2 * x;
  } else if (fp.x > size.w / 2) {
    const x = size.w - fp.x;
    ret.r = size.w - 2 * x;
  }

  if (fp.y < size.h / 2) {
    const y = fp.y;
    ret.t = size.h - 2 * y;
  } else if (fp.y > size.h / 2) {
    const y = size.h - fp.y;
    ret.b = size.h - 2 * y;
  }

  return [ret.t, ret.r, ret.b, ret.l];
})();

const preCrop = [{ key: "padding", params: padding }];

const imgPath = character.splash_art
  ? ProxyService.getImage(
      `/${character.splash_art.filename_disk}`,
      preCrop,
      "webp",
    )
  : false;
// console.log(character.name, imgPath);
Object.assign(vars, {
  "--placeholder": `url("${ProxyService.getImage(placeholderPath, [], "webp")}")`,
  "--attributeBg":
    'url("' +
    ProxyService.getImage(
      backgroundPath,
      [{ key: "crop", params: [0, 0] }],
      "webp",
    ) +
    '")',
});

if (character.options != null) {
  Object.assign(options, character.options);
  console.log(options);
}

const characterTransforms: Variants = {
  portrait: [
    {
      key: "gravity",
      params: [
        "fp",
        0.5 + options.portrait.index.x,
        0.5 + options.portrait.index.y,
      ],
    },

    {
      key: "resize",
      params: [
        "fill",
        options.portrait.resize.width,
        options.portrait.resize.height,
        1,
        1,
      ],
    },
  ],
  landscape: [
    {
      key: "gravity",
      params: [
        "fp",
        0.5 + options.landscape.index.x,
        0.5 + options.landscape.index.y,
      ],
    },

    {
      key: "resize",
      params: [
        "fill",
        options.landscape.resize.width,
        options.landscape.resize.height,
        1,
        1,
      ],
    },
  ],
  icon: [
    {
      key: "gravity",
      params: ["fp", 0.5 + options.icon.index.x, 0.5 + options.icon.index.y],
    },
    {
      key: "crop",
      params: [options.icon.crop.width, options.icon.crop.height],
    },
    { key: "resize", params: ["fill", 740, 740] },
  ],
};

const splash: Variants = variants.reduce((prev, curr) => {
  Object.assign(prev, {
    [curr]: ProxyService.getImage(
      imgPath,
      characterTransforms[curr],
      "webp",
      false,
    ),
  });
  return prev;
}, {});

const Holo: Variants = variants.reduce((prev, curr) => {
  Object.assign(prev, {
    [curr]: ProxyService.getImage(
      "/overlays/Holo_" + curr.at(0)?.toUpperCase() + curr.slice(1) + ".png",
      [],
      "webp",
    ),
  });
  return prev;
}, {});

const Frost: Variants = variants.reduce((prev, curr) => {
  Object.assign(prev, {
    [curr]: ProxyService.getImage(
      "/overlays/Frost_" + curr.at(0)?.toUpperCase() + curr.slice(1) + ".png",
      //@ts-ignore
      [],
      "webp",
    ),
  });
  return prev;
}, {});

variants.forEach((v) => {
  Object.assign(
    vars,
    { [`--char-${v}`]: `url("${splash[v]}")` },
    { [`--holo-${v}`]: `url("${Holo[v]}")` },
    { [`--frost-${v}`]: `url("${Frost[v]}")` },
  );
});

const card = tv({
  slots: {
    base: "size-full bg-linear-0 bg-(image:--attributeBg) from-(--primaryColor) via-(--secondaryColor) bg-cover bg-center bg-no-repeat",
    charBg:
      "absolute inset-0 bg-cover bg-top bg-no-repeat @icon:bg-(image:--char-icon) @landscape:bg-(image:--char-landscape) @portrait:bg-(image:--char-portrait) @square:bg-(image:--char-landscape)",

    overlay:
      "absolute inset-0 bg-linear-0 from-(--primaryColor) via-(--secondaryColor)",
    outline:
      "absolute inset-[0.15rem] z-10 flex flex-col justify-end rounded-sm border-1 border-(--cardAccent) p-1 text-center text-(--cardAccent) inset-shadow-card @5xs:inset-1 @5xs:border-2 @3xs:@min-h-5xs:p-4 @xl:@min-h-lg:p-8",
    placeholder:
      "absolute inset-0 hidden bg-[image:var(--placeholder)] bg-[50%_45%] bg-no-repeat @icon:bg-[size:35cqw_35cqw] @landscape:bg-[size:35cqh_35cqh] @portrait:bg-[size:45cqw_45cqw]",
    name: "font-heading text-xs font-bold text-balance shadow-black drop-shadow-md @6xs:text-sm @5xs:@min-h-5xs:text-xl @sm:@min-h-xs:text-2xl @xl:@min-h-lg:text-3xl",
    banner:
      "font-subheading text-[0.5rem] text-balance italic shadow-black drop-shadow-md @3xs:text-xs @5xs:@min-h-5xs:text-sm @xs:@min-h-2xs:text-base @sm:@min-h-xs:text-lg @xl:@min-h-lg:text-xl",
    frost:
      "z-10 hidden size-full bg-cover mix-blend-screen @icon:bg-(image:--frost-icon) @landscape:bg-(image:--frost-landscape) @portrait:bg-(image:--frost-portrait) @square:bg-(image:--frost-icon)",
    holo: "absolute inset-0 z-10 hidden size-full bg-cover mix-blend-screen @icon:bg-(image:--holo-icon) @landscape:bg-(image:--holo-landscape) @portrait:bg-(image:--holo-portrait) @square:bg-(image:--holo-icon)",
  },
  variants: {
    debut: {
      true: {
        holo: "block",
        outline: "p-2 @3xs:@min-h-5xs:p-4 @xl:@min-h-lg:p-6",
      },
    },
    speculation: {
      true: {
        frost: "block",
      },
    },
    placeholder: {
      true: {
        placeholder: "block",
      },
    },
    rarity: {
      5: {
        banner: "@max-6xs:hidden @icon:hidden @max-h-6xs:hidden",
      },
      4: {
        banner: "hidden",
      },
    },
  },
  compoundVariants: [{ rarity: 4 }],
});

const {
  base,
  charBg,
  overlay,
  outline,
  placeholder,
  name,
  banner,
  frost,
  holo,
} = card({
  rarity: character.rarity,
  speculation: character.spec,
  debut: character.debut,
  placeholder: imgPath == false,
});
---

<div
  class:list={[
    "@container-[size] size-full relative min-h-16 min-w-16",
    className,
  ]}
  style={vars}
>
  <div class={base()}>
    <div class={charBg()}></div>
    <div class={overlay()}></div>
    <div class={placeholder()}></div>
    <!-- Text & Outline -->
    <div class={outline()}>
      <h2 class={name()}>
        {character.name}
      </h2>

      <h3 class={banner()}>
        {character.bannerName}
      </h3>
    </div>
  </div>

  <!-- OVERLAYS -->
  <div class="absolute inset-0">
    <div class={holo()}>
      <Border />
    </div>
    <div class={frost()}></div>
  </div>
</div>
