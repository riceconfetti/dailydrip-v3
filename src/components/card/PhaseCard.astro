---
const { event } = Astro.props;
import directus from "$services/directus";
import { readItem } from "@directus/sdk";
import CharacterCard from "./CharacterCard.astro";
import WeaponCard from "./WeaponCard.astro";
import PhaseHeader from "./PhaseHeader.svelte";
import { tv } from "tailwind-variants";

let characters = event.featured_characters;

let fiveStars = characters.filter((c: any) => c.rarity == 5);
let fourStars = characters.filter((c: any) => c.rarity == 4);
let weapons = event.featured_weapons;

const count: 1 | 2 | 3 =
  fiveStars.length == 1 ? 1 : fiveStars.length == 2 ? 2 : 3;

fiveStars = await Promise.all(
  fiveStars.map(async (c: any) => {
    c.signature = await directus.request(readItem("weapons", c.signature));
    return c;
  }),
);

const phaseCard = tv({
  slots: {
    base: "grid-rows-auto grid size-full grid-cols-2 gap-2",
    box: "gap-2",
    character: "",
    weapon: "",
  },
  variants: {
    count: {
      1: {
        //1 limited
        base: "grid-cols-1 grid-rows-3",
      },
      2: {
        //2 limiteds
        base: "grid-rows-[5fr_2fr]",
      },
      3: {
        //3 or more limited
        base: "grid-cols-[5fr_3fr_1fr] grid-rows-4",
      },
    },
    rarity: {
      5: {},
      4: {},
    },
  },
  compoundVariants: [
    {
      rarity: 5,
      count: 1,
      class: {
        box: "col-span-full row-span-2 grid min-h-[40dvw] grid-rows-[5fr_1fr]",
      },
    },
    {
      rarity: 5,
      count: 2,
      class: {
        box: "row-span-1 grid min-h-[50dvw] grid-rows-[5fr_1fr]",
      },
    },
    {
      rarity: 5,
      count: 3,
      class: {
        box: "col-span-2 col-start-2 grid grid-cols-subgrid first:col-span-1 first:col-start-1 first:row-span-3 first:min-h-[50dvw] first:grid-rows-[5fr_1fr]",
      },
    },
    {
      rarity: 4,
      count: 1,
      class: {
        box: "col-span-full grid grid-flow-row grid-cols-[repeat(auto-fit,_minmax(20%,_1fr))]",
      },
    },
    {
      rarity: 4,
      count: [2, 3],
      class: {
        box: "col-span-full grid auto-cols-fr grid-flow-col",
      },
    },
  ],
});

const { base, box, character, weapon } = phaseCard({ count: count, rarity: 5 });
---

<div class="flex flex-col gap-2 w-full h-full">
  <PhaseHeader client:load {event} />
  <div class={base()}>
    {
      fiveStars.map((c: any) => (
        <div class={box({ rarity: 5 })}>
          <CharacterCard character={c} class={character()} />
          <WeaponCard weapon={c.signature} class={weapon()} />
        </div>
      ))
    }
    <div class={box({ rarity: 4 })}>
      {
        fourStars.map((c: any) => (
          <CharacterCard
            character={c}
            variant="portrait"
            class={character({ rarity: 4 })}
          />
        ))
      }
    </div>
    <div class={box({ rarity: 4 })}>
      {
        weapons.map((w: any) => (
          <WeaponCard weapon={w} class={weapon({ rarity: 4 })} />
        ))
      }
    </div>
  </div>
</div>
