---
import Header from "./header/Header.svelte";
import { classlist } from "./gridclass";
import { CharacterCard } from "../cards/character";
import { WeaponCard } from "../cards/weapon";
import directus from "$services/directus";
import { readItem } from "@directus/sdk";
const { item } = Astro.props;
const { tag: Tag, event, game, blocks, id, ...rest } = item;
const parrent = rest;

const list = ["grid", "grid-rows-subgrid", "grid-cols-subgrid"];
const p_char = await directus.request(
  readItem("characters", game.id, {
    fields: ["*", { splash_art: ["*"] }, { splash_pad: ["*"] }],
  })
);
const p_weap = await directus.request(
  readItem("weapons", game.id, {
    fields: ["*"],
  })
);
---

<Tag
  class:list={classlist(list, item).list}
  style={classlist(list, item).style}
>
  {
    blocks != undefined &&
      blocks.map((block: any) => {
        let item = block.item;
        item.event = event;
        item.game = game;
        item.base = parrent;

        switch (block.collection) {
          case "block_container": {
            item.event = event;
            item.game = game;
            return <Astro.self {item} />;
          }
          case "block_header": {
            return <Header {item} client:load />;
          }
          case "block_character": {
            if (event.featured_characters.length > item.index) {
              const { characters_id, ...rest } =
                event.featured_characters.filter(
                  (x: any) => x.rarity == item.rarity
                )[item.index];
              const character = structuredClone(characters_id);
              character.spec = rest.spec;
              return <CharacterCard {character} {item} />;
            } else {
              let character: { [key: string]: any } = structuredClone(p_char);
              character.spec = false;
              character.rarity = item.rarity;
              character.splash_art =
                item.rarity == 5 ? undefined : character.splash_art;
              character.splash_pad =
                item.rarity == 5 ? undefined : character.splash_pad;
              return <CharacterCard {character} {item} />;
            }
          }

          case "block_weapon": {
            if (
              item.signature &&
              event.featured_characters.length > item.index
            ) {
              const { characters_id, ...rest } =
                event.featured_characters[item.index];
              const character = structuredClone(characters_id);
              const weapon = character.signature;
              return <WeaponCard {weapon} {item} />;
            } else if (event.featured_weapons.length > item.index) {
              const { weapons_id } = event.featured_weapons[item.index];
              const weapon = structuredClone(weapons_id);
              return <WeaponCard {weapon} {item} />;
            } else {
              let weapon: { [key: string]: any } = structuredClone(p_weap);
              weapon.rarity = item.signature ? 5 : 4;
              return <WeaponCard {weapon} {item} />;
            }
          }
        }
      })
  }
</Tag>
