---
import Header from "./header/Header.svelte";
import { CharacterCard } from "../cards/character";
import { WeaponCard } from "../cards/weapon";
import directus from "$services/directus";
import { readItem } from "@directus/sdk";
const { item, container = false } = Astro.props;
const { tag: Tag, event, game, id, grid, style, events, ...rest } = item;
const base = item.base ? item.base : rest;

const list = item.classlist
  ? item.classlist
  : ["grid", "grid-rows-subgrid", "grid-cols-subgrid"];

const p_char = await directus.request(
  readItem("characters", game.id, {
    fields: ["*", { splash_art: ["*"] }, { splash_pad: ["*"] }],
  })
);
const p_weap = await directus.request(
  readItem("weapons", game.id, {
    fields: ["*"],
  })
);

const junction: any = container ? "block_container_blocks" : "layouts_blocks";

const blocks = await Promise.all(
  item.blocks.map(
    async (bid: any) =>
      await directus.request(readItem(junction, bid, { fields: ["*.*"] }))
  )
);

let show = true;
if (item.opt && blocks) {
  let display = blocks.length;
  blocks.forEach((block: any) => {
    const char_list = event.featured_characters.filter(
      (x: any) => x.characters_id.rarity == block.item.rarity
    );
    switch (block.collection) {
      case "block_character": {
        if (char_list.length < block.item.index + 1 && block.item.opt) {
          display--;
        }
        break;
      }
      case "block_weapon": {
        if (
          ((item.signature && char_list.length < block.item.index + 1) ||
            event.featured_weapons.length < block.item.index + 1) &&
          block.item.opt
        ) {
          display--;
        }
        break;
      }
    }
  });
  show = display != 0;
}
list.push(
  "empty:hidden",
  "only-of-type:grid",
  "only-of-type:grid-rows-7",
  "group"
);
---

{
  show && (
    <Tag class:list={list} style={item.style}>
      {blocks != undefined &&
        blocks.map((block: any) => {
          let item = block.item;
          item.event = event;
          item.game = game;
          item.base = base;

          switch (block.collection) {
            case "block_container": {
              const container = true;
              return <Astro.self {item} {container} />;
            }
            case "block_header": {
              return <Header {item} client:load />;
            }
            case "block_character": {
              const char_list = event.featured_characters.filter(
                (x: any) => x.characters_id.rarity == item.rarity
              );
              item.classlist.push("basis-2/3", "group-only-of-type:row-span-6");

              if (char_list && char_list.length > item.index) {
                const { characters_id, ...rest } = char_list[item.index];
                const character = structuredClone(characters_id);
                character.spec = rest.spec;
                return (
                  <div class:list={item.classlist}>
                    <CharacterCard {character} {item} />
                  </div>
                );
              } else if (!item.opt) {
                let character: { [key: string]: any } = structuredClone(p_char);
                character.spec = false;
                character.rarity = item.rarity;
                character.splash_art =
                  item.rarity == 5 ? undefined : character.splash_art;
                character.splash_pad =
                  item.rarity == 5 ? undefined : character.splash_pad;

                return (
                  <div class:list={item.classlist}>
                    <CharacterCard {character} {item} />
                  </div>
                );
              }
            }
            case "block_weapon": {
              item.classlist.push("basis-1/3", "group-only-of-type:row-span-1");
              if (
                item.signature &&
                event.featured_characters.length > item.index
              ) {
                const { characters_id, ...rest } =
                  event.featured_characters[item.index];
                const character = structuredClone(characters_id);
                const weapon = character.signature;
                return <WeaponCard {weapon} {item} />;
              } else if (event.featured_weapons.length > item.index) {
                const { weapons_id } = event.featured_weapons[item.index];
                const weapon = structuredClone(weapons_id);
                return <WeaponCard {weapon} {item} />;
              } else if (!item.opt) {
                let weapon: { [key: string]: any } = structuredClone(p_weap);
                weapon.rarity = item.signature ? 5 : 4;
                return <WeaponCard {weapon} {item} />;
              }
            }
          }
        })}
    </Tag>
  )
}
