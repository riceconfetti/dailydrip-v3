---
import directus from "$services/directus";
import {
  readItems,
  readItem,
  type Query,
  type QueryFilter,
} from "@directus/sdk";
import Layout from "$layouts/Layout.astro";
import type { Schema, Version } from "$types/collection";
import { PUBLIC_DEPLOY_MODE } from "astro:env/client";
import { VersionCard, VersionFallback } from "$components/ui/cards/version";

const editActive = Astro.cookies.get("editing")?.boolean();
const isPreview = PUBLIC_DEPLOY_MODE == "server";

export async function getStaticPaths() {
  const games = await directus.request(readItems("games", { fields: ["id"] }));

  return games.map((game) => {
    return { params: { gameId: game.id } };
  });
}

if (Astro.params == undefined || Astro.params == null) {
  return Astro.redirect("/");
}
const { gameId } = Astro.params;
let game = (await directus.request(readItem("games", gameId!))).name;

const query: Query<Schema, Version> = {
  fields: ["id"],
  sort: ["semVer"],
  limit: -1,
  filter: {
    game: {
      id: {
        _eq: gameId,
      },
    },
    status: isPreview
      ? {
          _neq: "archived",
        }
      : {
          _eq: "published",
        },
    events: {
      endDate: {
        _gte: "$NOW",
      },
    },
  },
};

let versions: string[] = (
  await directus.request(readItems("versions", query))
).map((x) => x.id);
const title = "The Daily Drip | " + game;
---

<Layout {title}>
  <div
    class="p-0 sm:p-4 md:p-6 xl:p-8 flex flex-col gap-2 items-center justify-around w-full overflow-auto"
  >
    {
      versions.map((vId) =>
        isPreview && !editActive ? (
          <VersionCard {vId} server:defer>
            <VersionFallback slot="fallback" />
          </VersionCard>
        ) : (
          <VersionCard {vId} />
        )
      )
    }
  </div>
</Layout>
