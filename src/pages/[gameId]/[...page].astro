---
import directus from "$services/directus";
import {
  readItems,
  readItem,
  aggregate,
  type Query,
  type QueryFilter,
} from "@directus/sdk";
import type { Schema, Version } from "$types/collection";
import { PUBLIC_DEPLOY_MODE } from "astro:env/client";
import GenericVersionCard from "$components/fallbacks/GenericVersionCard.astro";
import Pagination from "$components/Pagination.svelte";
import Layout from "$layouts/Layout.astro";
import VerisonCard from "$components/card/VerisonCard.astro";

const isPreview = PUBLIC_DEPLOY_MODE == "server";
const limit = 5;

export async function getStaticPaths() {
  const games = await directus.request(readItems("games", { fields: ["id"] }));

  return games.map((game) => {
    return { params: { gameId: game.id, page: undefined } };
  });
}

const { gameId, page } = Astro.params;
let game = await directus.request(readItem("games", gameId));
let totalVersions = (
  await directus.request(
    aggregate("versions", {
      aggregate: { count: "*" },
      groupBy: ["game", "status"],
    }),
  )
).filter((x: any) => x.game == gameId && x.status != "archived");

const query: Query<Schema, Version> = {
  fields: ["id"],
  sort: ["semVer"],
  limit: -1,
};

const filter: QueryFilter<Schema, Version> = {
  game: {
    id: {
      _eq: gameId,
    },
  },
};

if (!isPreview) {
  filter.status = {
    _eq: "published",
  };
  Object.assign(filter, {
    events: {
      endDate: {
        _gte: "$NOW",
      },
    },
  });
} else {
  Object.assign(query, {
    limit: limit,
    offset: page! > 1 ? (page! - 1) * limit : 0,
  });
  Object.assign(filter, {
    status: {
      _neq: "archived",
    },
  });
}

query.filter = filter;

//@ts-ignore
let versions: string[] = (
  await directus.request(readItems("versions", query))
).map((x) => x.id);

// versions.sort((a, b) => a.semVer - b.semVer);
const title = "The Daily Drip | " + game.name;
---

<Layout {title}>
  <div
    class="p-0 sm:p-4 md:p-6 xl:p-8 flex flex-col gap-2 items-center justify-around w-full overflow-auto"
  >
    {
      versions.map((vId) =>
        isPreview ? (
          <VerisonCard {vId} {game} server:defer={isPreview}>
            <GenericVersionCard slot="fallback" />
          </VerisonCard>
        ) : (
          <VerisonCard {vId} {game} />
        ),
      )
    }
    {
      isPreview && (
        <Pagination
          client:load
          count={totalVersions[0].count}
          perPage={limit}
          currPage={page}
        />
      )
    }
  </div>
</Layout>
