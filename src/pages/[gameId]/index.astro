---
import directus from "$services/directus";
import { readItems, readItem } from "@directus/sdk";
import { PUBLIC_DEPLOY_MODE } from "astro:env/client";
import GenericVersionCard from "$components/fallbacks/GenericVersionCard.astro";

const isPreview = PUBLIC_DEPLOY_MODE == "server";

export async function getStaticPaths() {
  const games = await directus.request(readItems("games", { fields: ["id"] }));
  return games.map((game) => ({
    params: { gameId: game.id },
  }));
}

let game = await directus.request(readItem("games", Astro.params.gameId));

import Layout from "$layouts/Layout.astro";
import VerisonCard from "$components/card/VerisonCard.astro";
import type { Version } from "$types/db";

const filter = {
  game: {
    id: {
      _eq: Astro.params.gameId,
    },
  },
};

if (!isPreview) {
  Object.assign(filter, {
    events: {
      startDate: {
        _gte: "$NOW(-4 weeks)",
      },
    },
  });
}

let versions: Version[] = await directus.request(
  readItems("versions", {
    fields: ["*"],
    filter: filter,
  }),
);
// console.log(versions);

versions.sort((a, b) => a.semVer - b.semVer);
//@ts-ignore
const title = "The Daily Drip | " + game.name;
---

<Layout {title}>
  <div
    class="p-0 sm:p-4 md:p-6 xl:p8 flex flex-col gap-4 items-center w-full overflow-auto"
  >
    {
      versions.map((version) =>
        isPreview ? (
          <VerisonCard {version} server:defer={isPreview}>
            <GenericVersionCard slot="fallback" />
          </VerisonCard>
        ) : (
          <VerisonCard {version} />
        ),
      )
    }
  </div>
</Layout>
