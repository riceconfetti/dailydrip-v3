---
import directus from "$services/directus";
import { readItem, updateItem } from "@directus/sdk";
import { PUBLIC_DEPLOY_MODE } from "astro:env/client";
import ProxyService from "$services/imgproxy";
import dayjs from "dayjs";

import Layout from "$layouts/Layout.astro";
import CharacterCard from "$components/card/CharacterCard.astro";
import BannerCard from "$components/card/BannerCard.astro";
import Editor from "$components/Editor.svelte";
import OptionsForm from "$components/OptionsForm.svelte";
import defaultOptions from "$store/options.json";

const getOptions = () => JSON.parse(JSON.stringify(defaultOptions));
let options = getOptions();

export const prerender = false;
const { charId } = Astro.params;

let character = await directus.request(
  readItem("characters", charId!, {
    //@ts-ignore
    fields: ["*", "splash_art.*"],
  }),
);

if (character.options != null) {
  Object.assign(options, character.options);
  // console.log(options);
}

// console.log(character.splash_art);

let debut = structuredClone(character);
let spec = structuredClone(character);
let both = structuredClone(character);

Object.assign(debut, { debut: true });
Object.assign(spec, { spec: true });
Object.assign(both, { debut: true, spec: true });

if (PUBLIC_DEPLOY_MODE == "static") return Astro.rewrite("/404");

const title = "The Daily Drip | " + character.name;

const transforms = [
  {
    key: "gravity",
    params: [
      "fp",
      character.splash_art.focal_point_x / character.splash_art.width,
      character.splash_art.focal_point_y / character.splash_art.height,
    ],
  },
  {
    key: "crop",
    params: [options.icon.crop.width, options.icon.crop.height],
  },
  { key: "resize", params: ["fill", 300, 300] },
];

const sizes = [
  "9xs",
  "8xs",
  "7xs",
  "6xs",
  "5xs",
  "4xs",
  "3xs",
  "2xs",
  "xs",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl",
  "3xl",
  "4xl",
  "5xl",
];

const width = Astro.url.searchParams.get("width") || "sm";
const height = Astro.url.searchParams.get("height") || "2xl";

const iconPath =
  character.splash_art != null
    ? ProxyService.getImage(
        `/${character.splash_art.filename_disk}`,
        transforms,
      )
    : ProxyService.getImage(`/`, []);

const { events, ...rest } = character;
let event: any = {
  startDate: dayjs().subtract(7, "days").format("YYYY-MM-DD"),
  endDate: dayjs().add(7, "days").format("YYYY-MM-DD"),
};
let phase = await directus.request(readItem("phases", 1));
let bannerEvent = { phase };
Object.assign(bannerEvent, event, character, rest);

const token = Astro.url.searchParams.get("token");

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    let newOptions = {
      portrait: {
        index: {
          x: Number(data.get("portrait_index_x")),
          y: Number(data.get("portrait_index_y")),
        },
        resize: {
          width: Number(data.get("portrait_resize_width")),
          height: Number(data.get("portrait_resize_height")),
        },
      },
      landscape: {
        index: {
          x: Number(data.get("landscape_index_x")),
          y: Number(data.get("landscape_index_y")),
        },
        resize: {
          width: Number(data.get("landscape_resize_width")),
          height: Number(data.get("landscape_resize_height")),
        },
      },
      icon: {
        index: {
          x: Number(data.get("icon_index_x")),
          y: Number(data.get("icon_index_y")),
        },
        crop: {
          width: Number(data.get("icon_crop_width")),
          height: Number(data.get("icon_crop_height")),
        },
      },
      banner: {
        height: Number(data.get("banner_height")),
        crop: {
          width: Number(data.get("banner_crop_width")),
          height: Number(data.get("banner_crop_height")),
        },
      },
    };

    character.options = newOptions;
    Object.assign(options, newOptions);

    if (
      token ==
      "aD2rjKJP5JEdzNucDJbMnHIqAzfuJflRui0BXPpCs4zvhjp7WMZLCPf0T1zCWtCc"
    ) {
      await directus.request(updateItem("characters", character.id, character));
      character = await directus.request(
        readItem("characters", charId!, {
          //@ts-ignore
          fields: ["*", "splash_art.*"],
        }),
      );
    }

    // Do something with the data
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout {title}>
  <div class="flex gap-4 size-full">
    <div
      class="w-full grid grid-rows-[1fr_auto] gap-2 justify-items-center p-6"
    >
      <div class="w-full max-w-4xl flex flex-col gap-3">
        <h1 class="text-5xl font-heading font-bold w-full text-left">
          {character.name}
        </h1>
        <div class="flex gap-3 w-full justify-start">
          <div
            class="relative size-25 aspect-square rounded-full overflow-clip border-2 border-accent-gold-500"
          >
            <div class="w-full absolute h-1/2 border-b border-black"></div>
            <div class="h-full absolute w-1/2 border-r border-black"></div>
            <img src={iconPath} class="size-full" />
          </div>
          <div class="flex gap-2 flex-wrap w-full">
            {
              character.colors &&
                character.colors.map((c: any) => (
                  <div
                    class="w-25 p-2 aspect-square bg-(--currColor) font-subheading text-xs font-bold text-(--textColor)"
                    style={{
                      "--currColor": c.css,
                      "--textColor": c.l > 0.5 ? "#000" : "#fff",
                    }}
                  >
                    <p>L: {c.l}</p>
                    <p>C: {c.c}</p>
                    <p>H: {c.h}</p>
                    <p>A: {c.area}</p>
                  </div>
                ))
            }
          </div>
        </div>
        <BannerCard {bannerEvent} server:defer status="current" />
      </div>
      <Editor client:load {width} {height}>
        <CharacterCard {character} slot="base" />
        <CharacterCard character={debut} slot="debut" />
        <CharacterCard character={spec} slot="spec" />
        <CharacterCard character={both} slot="both" />
      </Editor>
    </div>
    <OptionsForm client:only="svelte" {options} />
  </div>
</Layout>
