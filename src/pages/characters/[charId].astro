---
import directus from "$services/directus";
import type { Schema, Character, DripFile } from "$types/collection";
import { readItem, type Query, readFile } from "@directus/sdk";
import { PUBLIC_DEPLOY_MODE } from "astro:env/client";
import dayjs from "dayjs";

import Layout from "$layouts/Layout.astro";
import CharacterCard from "$components/card/CharacterCard.astro";
import BannerCard from "$components/card/BannerCard.astro";
import Editor from "$components/Editor.svelte";

export const prerender = false;
const { charId } = Astro.params;

const character = await directus.request(
  readItem("characters", charId!, {
    fields: [
      "*",
      {
        signature: [
          "*",
          { icon: ["filename_disk"] },
          { full: ["filename_disk"] },
        ],
      },
      { splash_art: ["*"] },
      { splash_pad: ["*"] },
    ],
  } as Query<Schema, Character>),
);

let game = await directus.request(
  readItem("games", character.game as string, { fields: ["*"] }),
);

const { splash_art, splash_pad }: { splash_art: any; splash_pad: any } =
  character;

const extract = {
  left: Math.round((splash_pad.width! - splash_art.focal_size!) / 2),
  top: Math.round((splash_pad.height! - splash_art.focal_size!) / 2),
  width: splash_art.focal_size!,
  height: splash_art.focal_size!,
};

const imgPath =
  typeof splash_pad != "string" && typeof splash_art != "string"
    ? `https://directus.dailydrip.news/assets/${character.splash_pad}?transforms=[["extract",${JSON.stringify(extract)}]]`
    : "/";

if (PUBLIC_DEPLOY_MODE == "static") return Astro.rewrite("/404");

const title = "The Daily Drip | " + character.name;

const sizes = [
  "9xs",
  "8xs",
  "7xs",
  "6xs",
  "5xs",
  "4xs",
  "3xs",
  "2xs",
  "xs",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl",
  "3xl",
  "4xl",
  "5xl",
];

const width = Astro.url.searchParams.get("width") || "3xs";
const height = Astro.url.searchParams.get("height") || "md";

const { events, ...rest } = character;
let event: any = {
  startDate: dayjs().subtract(7, "days").format("YYYY-MM-DD"),
  endDate: dayjs().add(7, "days").format("YYYY-MM-DD"),
};
// console.log(event);
let phase = await directus.request(readItem("phases", 1));
let bannerEvent = { phase };
Object.assign(bannerEvent, event, {
  character: character,
  game: character.game,
  debut: true,
});
// console.log("Character", bannerEvent);
---

<Layout {title}>
  <div class="flex gap-4 size-full">
    <div
      class="w-full grid grid-rows-[1fr_auto] gap-2 justify-items-center p-6"
    >
      <div class="w-full max-w-4xl flex flex-col gap-3">
        <h1 class="text-5xl font-heading font-bold w-full text-left pb-2">
          {character.name}
        </h1>
        <div class="flex gap-3 w-full justify-start">
          <div
            class="relative size-25 aspect-square rounded-full overflow-clip border-2 border-accent-gold-500"
          >
            <div class="w-full absolute h-1/2 border-b border-black"></div>
            <div class="h-full absolute w-1/2 border-r border-black"></div>
            <img src={imgPath} class="size-full" />
          </div>
          <div class="flex gap-2 flex-wrap w-full">
            {
              character.colors &&
                character.colors.map((c: any) => (
                  <div
                    class="w-25 p-2 aspect-square bg-(--currColor) font-subheading text-xs font-bold text-(--textColor)"
                    style={{
                      "--currColor": c.css,
                      "--textColor": c.l > 0.5 ? "#000" : "#fff",
                    }}
                  >
                    <p>L: {c.l}</p>
                    <p>C: {c.c}</p>
                    <p>H: {c.h}</p>
                    <p>A: {c.area}</p>
                  </div>
                ))
            }
          </div>
        </div>
        <BannerCard {bannerEvent} server:defer status="current" />
        <BannerCard
          bannerEvent={Object.assign(structuredClone(bannerEvent), {
            debut: false,
          })}
          server:defer
          status="current"
        />
      </div>
      <Editor client:load {width} {height}>
        <CharacterCard {game} {character} slot="base" />
        <CharacterCard
          {game}
          character={Object.assign(structuredClone(character), { debut: true })}
          slot="debut"
        />
        <CharacterCard
          {game}
          character={Object.assign(structuredClone(character), { spec: true })}
          slot="spec"
        />
        <CharacterCard
          {game}
          character={Object.assign(structuredClone(character), {
            debut: true,
            spec: true,
          })}
          slot="both"
        />
      </Editor>
    </div>
  </div>
</Layout>
