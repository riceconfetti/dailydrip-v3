---
import directus from "$services/directus";
import type { Schema, Character } from "$types/collection";
import { readItem, type Query, readFile } from "@directus/sdk";
import { PUBLIC_DEPLOY_MODE } from "astro:env/client";
import ProxyService from "$services/imgproxy";
import dayjs from "dayjs";

import Layout from "$layouts/Layout.astro";
import CharacterCard from "$components/card/CharacterCard.astro";
import BannerCard from "$components/card/BannerCard.astro";
import Editor from "$components/Editor.svelte";

interface Option {
  key: string;
  x: number;
  y: number;
  width: number;
  height: number;
}
const defOptions: { [key: string]: Option } = {
  portrait: {
    key: "portrait",
    x: 0,
    y: 0.15,
    width: 1600,
    height: 1600,
  },
  landscape: {
    key: "landscape",
    x: 0,
    y: 0.08,
    width: 1600,
    height: 1600,
  },
  icon: { key: "icon", x: 0, y: 0.02, width: 550, height: 550 },
  banner: {
    key: "banner",
    x: 0,
    y: 0.075,
    width: 1600,
    height: 800,
  },
};

export const prerender = false;
const { charId } = Astro.params;

const character = await directus.request(
  readItem("characters", charId!, {
    fields: [
      "*",
      {
        signature: [
          "*",
          { icon: ["filename_disk"] },
          { full: ["filename_disk"] },
        ],
      },
    ],
  } as Query<Schema, Character>),
);

let game = await directus.request(
  readItem("games", character.game as string, { fields: ["*"] }),
);
let splashArt = await directus.request(
  readFile(character.splash_art as string, { fields: ["*"] }),
);

const fp = {
  x: splashArt.focal_point_x ? splashArt.focal_point_x : 0.5,
  y: splashArt.focal_point_y ? splashArt.focal_point_y : 0.5,
};
const size = {
  w: splashArt.width ? splashArt.width : 1,
  h: splashArt.height ? splashArt.height : 1,
};
const padding = (() => {
  let ret = {
    t: 0,
    r: 0,
    b: 0,
    l: 0,
  };
  if (fp.x < size.w / 2) {
    const x = fp.x;
    ret.l = size.w - 2 * x;
  } else if (fp.x > size.w / 2) {
    const x = size.w - fp.x;
    ret.r = size.w - 2 * x;
  }

  if (fp.y < size.h / 2) {
    const y = fp.y;
    ret.t = size.h - 2 * y;
  } else if (fp.y > size.h / 2) {
    const y = size.h - fp.y;
    ret.b = size.h - 2 * y;
  }

  return [ret.t, ret.r, ret.b, ret.l];
})();

const preCrop = [{ key: "padding", params: padding }];

const imgPath = character.splash_art
  ? ProxyService.getImage(`/${splashArt.filename_disk}`, preCrop, "webp")
  : false;

const getOption = (key: string) => {
  const option = character.options.find((opt: any) => opt.key == key);
  return option ? option : defOptions[key];
};

if (PUBLIC_DEPLOY_MODE == "static") return Astro.rewrite("/404");

const title = "The Daily Drip | " + character.name;

const transforms = [
  {
    key: "gravity",
    params: [
      "fp",
      0.5 + Number(getOption("icon")?.x),
      0.5 + Number(getOption("icon")?.y) - 0.02,
    ],
  },
  {
    key: "crop",
    params: [
      Number(getOption("icon")?.width) * 0.4,
      Number(getOption("icon")?.height) * 0.4,
    ],
  },
  { key: "resize", params: ["fill", 740, 740] },
];

const sizes = [
  "9xs",
  "8xs",
  "7xs",
  "6xs",
  "5xs",
  "4xs",
  "3xs",
  "2xs",
  "xs",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl",
  "3xl",
  "4xl",
  "5xl",
];

const width = Astro.url.searchParams.get("width") || "sm";
const height = Astro.url.searchParams.get("height") || "2xl";

const iconPath =
  character.splash_art != null
    ? ProxyService.getImage(imgPath, transforms, "webp", false)
    : ProxyService.getImage(`/`, []);

const { events, ...rest } = character;
let event: any = {
  startDate: dayjs().subtract(7, "days").format("YYYY-MM-DD"),
  endDate: dayjs().add(7, "days").format("YYYY-MM-DD"),
};
console.log(event);
let phase = await directus.request(readItem("phases", 1));
let bannerEvent = { phase };
Object.assign(bannerEvent, event, {
  character: character,
  game: character.game,
  debut: true,
});
// console.log("Character", bannerEvent);
---

<Layout {title}>
  <div class="flex gap-4 size-full">
    <div
      class="w-full grid grid-rows-[1fr_auto] gap-2 justify-items-center p-6"
    >
      <div class="w-full max-w-4xl flex flex-col gap-3">
        <h1 class="text-5xl font-heading font-bold w-full text-left">
          {character.name}
        </h1>
        <div class="flex gap-3 w-full justify-start">
          <div
            class="relative size-25 aspect-square rounded-full overflow-clip border-2 border-accent-gold-500"
          >
            <div class="w-full absolute h-1/2 border-b border-black"></div>
            <div class="h-full absolute w-1/2 border-r border-black"></div>
            <img src={iconPath} class="size-full" />
          </div>
          <div class="flex gap-2 flex-wrap w-full">
            {
              character.colors &&
                character.colors.map((c: any) => (
                  <div
                    class="w-25 p-2 aspect-square bg-(--currColor) font-subheading text-xs font-bold text-(--textColor)"
                    style={{
                      "--currColor": c.css,
                      "--textColor": c.l > 0.5 ? "#000" : "#fff",
                    }}
                  >
                    <p>L: {c.l}</p>
                    <p>C: {c.c}</p>
                    <p>H: {c.h}</p>
                    <p>A: {c.area}</p>
                  </div>
                ))
            }
          </div>
        </div>
        <BannerCard {bannerEvent} server:defer status="current" />
      </div>
      <Editor client:load {width} {height}>
        <CharacterCard {game} {character} slot="base" />
        <CharacterCard
          {game}
          character={Object.assign(structuredClone(character), { debut: true })}
          slot="debut"
        />
        <CharacterCard
          {game}
          character={Object.assign(structuredClone(character), { spec: true })}
          slot="spec"
        />
        <CharacterCard
          {game}
          character={Object.assign(structuredClone(character), {
            debut: true,
            spec: true,
          })}
          slot="both"
        />
      </Editor>
    </div>
  </div>
</Layout>
